# -*- coding: utf-8 -*-
"""IP Project Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10T2w8z8P4damXSDA4BiiPcNQc_wSh5Mc
"""

create database library;
use library;

CREATE table book(book_code char(10) primary key, book_name varchar(60), author varchar(40), status_of_book varchar(40));

create table students(Adm_no int, name varchar(40), class_sec char(10));
  
create table borrow_log(book_code char(10), Adm_no int, date_of_issue DATE, date_of_tent_return DATE GENERATED ALWAYS AS (date_add(date_of_issue,interval 7 day)) STORED, date_of_actual_return date, fine float,fine_paid bool default false);

insert into students(Adm_no,name,class_sec) values(1,'SYED ABDUL HAADI','12a'),(2,'ARMAAN ABEDIN','12c'),(3,'ALEN ABRAHAM PUNNOSE','12b'),(4,'ANNIE AFRA LUVIS','12b'),(5,'VAIBHAV AGGARWAL','12c'),(6,'SAMIHAH AHMED','12c'),(7,'ADVAITH ANAND','12b'),(8,'SAI SUNIL AROLE','12b'),(9,'DIYA ATULBHAI MAKADIA','12a'),(10,'BEHLAAH B DOSSAJ', '12c'),(11,'YEDUNANDAN B','12b'),(12,'KRISH CHANDRAKANT MAKWANA','12c'),(13,'TANUSHKA CHATURVEDI','12b'),(14,'DARIN DAVIS JOHNSON','12a'),(15,'NANDITA DEEPAK','12b'),(16,'ARCHIT DEVENDRA MOHARIR','12a'),(17,'AMRO DIA ELDIN','12b'),(18,'KEERTHANA DURAI','12b'),(19,'TANIA ELIZABETH MANOJ','12b'),(20,'RIONA ELSA THOMAS','12b'),(21,'GADARA EVA PRAVINBHAI','12a'),(22,'DHIKSHITH G C','12a'),(23,'Prajeet Ganesh Shetty','12b'),(24,'NISHITA GOPI','12a'),(25,'MUSKAN GUPTA','12b'),(26,'SHIVANGI GUPTA','12a'),(27,'MOHAMMED HABEEB SAIT','12a'),(28,'SUYASH HARSHAVARDHANA','12a'),(29,'SHIMAAZ HAYAAN','12b'),(30,'FATHIMA IBTISAM','12c'),(31,'ROSHNI J','12a'),(32,'SOHAM JAGONDA PATIL','12a'),(33,'JOANNA JOHN','12b'),(34,'NANDHINI K H','12b'),(35,'MAHEK KAR','12b'),(36,'KAVIRI M N','12a'),(37,'AAKRUTI KAUL','12a'),(38,'NANDINI M NATARAJAN','12b'),(39,'KISHORE M S','12b'),(40,'VARSHAA M','12b'),(41,'SHANTANU MADAVAN','12a'),(42,'GIRIJA MADHUSUDHANA','12b'),(43,'MAHIKA MANOJ','12b'),(44,'RANIPETA FAIZAH MEHEK','12c'),(45,'AMMAAR MOHAMMED FAIZ','12a'),(46,'GAUTAM MYLAPILLI','12a'),(47,'GAURI NAIR','12b'),(48,'NATASHA NAIR','12a'),(49,'AKSHITA NEDUNURI','12c'),(50,'ARPITA PARASHURAM PANCHAL','12b'),(51,'KRISHNA PRAKKASH S','12a'),(52,'HITHA R','12c'),(53,'KAASHVI R','12b'),(54,'NAVYA R REDDY','12b'),(55,'DHRUV R SUDARSHAN','12b'),(56,'ARYAN RAI','12a'),(57,'AASHNA RAJESH','12b'),(58,'SHUKTI RAJESH','12c'),(59,'SHARVA RANGANATH','12b'),(60,'LAKSHMAN REDDY R','12b'),(61,'AANCHAL ROHIT KUMAR PATEL','12b'),(62,'APHENAV S','12b'),(63,'AVINASH S','12a'),(64,'HARSHITH S','12c'),(65,'NIKHIL S KALLARAKKAL','12a'),(66,'DEVAIN S MAHENDERKAR','12a'),(67,'SUSARLA S S S SAI SARAN','12a'),(68,'VASUNDHARA S','12c'),(69,'MOHAMMED SAAD HUSSAIN S','12a'),(70,'KANISHK SACHDEV','12a'),(71,'CHANDHANA SAJJA','12c'),(72,'ADITHYA SANKAR','12b'),(73,'PRASAD SHANMUKH PANJI','12a'),(74,'REYA SHETTY','12a'),(75,'SHAMBHAVI SHIVKUMAR','12a'),(76,'VAISHNAVI SHIVKUMAR','12a'),(77,'SONALI SINGAL','12c'),(78,'ANKITA SINGH','12b'),(79,'SANGAM SINGH','12c'),(80,'AARUSH SRIVASTAVA','12a'),(81,'HARINISHREE SUBBURAJ','12b'),(82,'HARIHARA SUBRAMANIAN','12b'),(83,'YOHAAN RONAK SUHAS WILLIAM','12c'),(84,'DHANUSH SUMIL','12b'),(85,'ALINA SYED','12b'),(86,'NABHAY TANEJA','12c'),(87,'VEJEY TEJASS R','12a'),(88,'TIA TIWARI','12a'),(89,'NIKHITHA V','12a'),(90,'TERESA VARGHESE','12a'),(91,'AKSHAYA VELLIANGIRI','12b');
  
insert into book(book_code,book_name,author,status_of_book) values('B01','To kill a mocking bird','Harper lee','Available'),('B02','Harry potter and the philosophers Stone','JK Rowling','Available'),('B03','Harry potter and the chamber of secrets','JK Rowling','Available'),('B04','Harry potter and the prisoner of azkaban','JK Rowling','Available'),('B05','Harry potter and the goblet of fire','JK Rowling','Available'),('B06','Harry potter and the order of phoenix','JK Rowling','Available'),('B07','Harry potter and the half-blood prince','JK Rowling','Available'),('B08','Harry potter and the deathly hallows','JK Rowling','Available'),('B09','Harry potter and the cursed child','JK Rowling','Available'),('B10','Percy Jackson and the lightning thief','Rick riordan','Available'),('B11','Percy Jackson and the sea of monsters','Rick riordan','Available'),('B12','Percy Jackson and the titans curse','Rick riordan','Available'),('B13','Percy Jackson and the battle of labyrinth','Rick riordan','Available'),('B14','Percy Jackson and the last olympian','Rick riordan','Available'),('B15','Heroes of olympus the lost hero','Rick riordan','Available'),('B16','Heroes of olympus the son of neptune','Rick riordan','Available'),('B17','Heroes of olympus the mark of athena','Rick riordan','Available'),('B18','Heroes of olympus the house of hades','Rick riordan','Available'),('B19','Heroes of olympus the blood of olympus','Rick riordan','Available'),('B20','The hunger games','Suzanne collins','Available'),('B21','The hunger games catching fire','Suzanne collins','Available'),('B22','The hunger games mockingjay','Suzanne collins','Available'),('B23','Shadow and bone','leigh bardugo','Available'),('B24','Siege and storm','leigh bardugo','Available'),('B25','Ruin and rising','leigh bardugo','Available'),('B26','Six of crows','leigh bardugo','Available'),('B27','King of scars','leigh bardugo','Available'),('B28','Ninth house','leigh bardugo','Available'),('B29','Crooked kingdom','leigh bardugo','Available'),('B30','the maze runner','James Dashner','Available'),('B31','The scorch trials','James Dashner','Available'),('B32','The Death cure','James Dashner','Available'),('B33','The kill order','James Dashner','Available'),('B34','The fever code','James Dashner','Available'),('B35','Divergent','Veronica roth','Available'),('B36','Insurgent','Veronica roth','Available'),('B37','Allegiant','Veronica roth','Available'),('B38','City of bones','Cassandra clare','Available'),('B39','City of ashes','Cassandra clare','Available'),('B40','City of glass','Cassandra clare','Available'),('B41','City of fallen angles','Cassandra clare','Available'),('B42','City of lost souls','Cassandra clare','Available'),('B43','City of heavenly fire','Cassandra clare','Available'),('B44','Clockwork Angel','Cassandra clare','Available'),('B45','Clockwork Prince','Cassandra clare','Available'),('B46','Clockwork Princess','Cassandra clare','Available'),('B47','The fault in our stars','John Green','Available'),('B48','the perks of being a wall flower','Stephen Chbosky','Available'),('B49','Book thief','Markus Zusak','Available'),('B50','All the bright places','Jennifer Niven','Available');
 
create table admin(admin_no char(10),admin_name varchar(60));

insert into admin(admin_no,admin_name) values ('A01','Ms. Jamie');

# Commented out IPython magic to ensure Python compatibility.
from pyzbar import pyzbar
import cv2
import mysql.connector
import matplotlib.pyplot as plt
import tkinter
from tkinter import *
from PIL import ImageTk,Image #PIL -> Pillow
from tkinter import messagebox
import datetime
import pandas as pd
from tkintertable import TableCanvas, TableModel


import mysql.connector

config = {
  'user': 'root',
  'password': '',
  'host': '127.0.0.1',
  'database': 'ip_project',
  'raise_on_warnings': True
}

con = mysql.connector.connect(**config)

cursor=con.cursor()

def scan():
    cam = cv2.VideoCapture(0)

    cv2.namedWindow("test")

    img_counter = 0

    while True:
        ret, frame = cam.read()
        if not ret:
            print("failed to grab frame")
            break
        cv2.imshow("test", frame)

        k = cv2.waitKey(1)
        if k%256 == 32:
            # SPACE pressed
            img_name = "opencv_frame_{}.png".format(img_counter)
            cv2.imwrite(img_name, frame)
            img_counter += 1
            break

    cam.release()

    cv2.destroyAllWindows()

    image = cv2.imread('opencv_frame_0.png')
    barcodes = pyzbar.decode(image)
    for barcode in barcodes:
        (x, y, w, h) = barcode.rect
        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)

        barcodeData = barcode.data.decode('utf-8')
        barcodeType = barcode.type

        return barcodeData

def login_student(scan_id_student):
    cursor=con.cursor()
    query = ("SELECT * FROM students WHERE (%s)=Adm_no")
    cursor.execute(query,(scan_id_student,))
    result=cursor.fetchall()
    
    global name
    
    for column in result:
        name=column[0]
    cursor.close()
    
    return name

def login_admin(scan_id_admin):
    cursor=con.cursor()
    query = ("SELECT * FROM book WHERE (%s)=book_code")
    cursor.execute(query,(scan_id_admin,))
    result=cursor.fetchall()
    
    global book_no
    
    for column in result:
        book_no=column[0]
    cursor.close()
    
    return book_no

def login():
    scanned_id=scan()
    
    try:
        if int(login_student(scanned_id))==int(scanned_id):
            return (scanned_id,'is a student')
    except:
        return ('ERROR PLEASE RETRY OR CONTACT ADMIN')

def search_available():
    cursor=con.cursor()
    query = ("SELECT * FROM book WHERE status_of_book='Available'")
    cursor.execute(query,)
    result=cursor.fetchall()
    cursor.close()
    
    return result


def search_by_name(name_of_book):
    cursor=con.cursor()
    query = ("SELECT * FROM book WHERE book_name LIKE %s")
    cursor.execute(query,("%" + name_of_book + "%",))
    result=cursor.fetchall()
    cursor.close()
    
    return result


def application():
      root = Tk()
      root.title("Library")
      root.minsize(width=400,height=400)
      root.geometry("1500x1500")

      button_ref = dict()
      heading_ref = dict()
    
      def home():
          destroy_page()
          login_page()
            
      def destroy_page():
        for key in button_ref:
            button_ref[key].destroy()
        button_ref.clear()
    
      def student_scan():
          scanned_id=scan()
        
          global scanned_id_student
          global scanned_id1
          global student_name
            
          scanned_id1=scanned_id
        
          cursor=con.cursor()
          query = ("SELECT * FROM students WHERE (%s)=Adm_no")
          cursor.execute(query,(scanned_id,))
          result=cursor.fetchall()
        
          for column in result:
              student_name=column[1]
          scanned_id_student=student_name
          cursor.close()
            
          try:
              if int(login_student(scanned_id))==int(scanned_id):
                borrow_books()
          except:
              print('Error')
                
                
      def borrow_function():
            scanned_book_id=scan()
            global book_code
            book_code=scanned_book_id
            
            cursor=con.cursor()
            query = ("SELECT * FROM book WHERE (%s)=book_code")
            cursor.execute(query,(scanned_book_id,))
            result=cursor.fetchall()
            
            global book_status
            global book_name
            
            for column in result:
                book_name=column[1]
                book_status=column[3]
            cursor.close()
            
            try:
              if book_status=='Available':
                        current_date= datetime.datetime.now().date()
                        cursor=con.cursor()
                        query_update_borrow = ("UPDATE book set status_of_book='Borrowed' where book_code=%s")
                        cursor.execute(query_update_borrow,(book_code,))
                        con.commit()
                        cursor.close()
                        cursor=con.cursor()
                        query_update_borrow_log = ("INSERT INTO borrow_log (book_code, Adm_no, date_of_issue) VALUES (%s,%s,%s)")
                        cursor.execute(query_update_borrow_log,(str(book_code),scanned_id1,current_date))
                        con.commit()
                        cursor.close()
                        after_scan_book_borrow()
            except:
              print('error')
                
      def return_function(): 
            scanned_book_id=scan()
            global book_code
            book_code=scanned_book_id
            
            cursor=con.cursor()
            query = ("SELECT * FROM book WHERE (%s)=book_code")
            cursor.execute(query,(scanned_book_id,))
            result=cursor.fetchall()
            
            global book_status
            global book_name
            
            for column in result:
                book_name=column[1]
                book_status=column[3]
            cursor.close()
            
            try:
              if book_status=='Borrowed':
                        current_date= datetime.datetime.now().date()
                        cursor=con.cursor()
                        query_update_borrow = ("UPDATE book set status_of_book='Available' where book_code=%s")
                        cursor.execute(query_update_borrow,(book_code,))
                        con.commit()
                        cursor.close()
                        cursor=con.cursor()
                        query_update_borrow_log = ("UPDATE borrow_log SET date_of_actual_return=%s WHERE book_code=%s AND Adm_no=%s")
                        cursor.execute(query_update_borrow_log,(current_date,str(book_code),scanned_id1))
                        con.commit()
                        cursor.close()
                        after_scan_book_return()
            except:
               print('error')
                
      def createHeadingFrame():
          headingFrame1 = Frame(root,bg="black",bd=5)
          headingFrame1.place(relx=0.2,rely=0.1,relwidth=0.6,relheight=0.16)
          heading_ref['frame']=headingFrame1
          return headingFrame1
      

      def createLabel(label,headingFrame):
          headingLabel = Label(headingFrame, text=label, bg='red', fg='white', font=('Arial',15))
          headingLabel.place(relx=-0,rely=0, relwidth=1, relheight=1)
          heading_ref['label']=headingLabel
          return headingLabel
      

      def createButton(label, rx, ry, relw, relh, entered_command):
          button = Button(root,text=label,bg='black', fg='white', command=entered_command)
          button.place(relx=rx,rely=ry, relwidth=relw,relheight=relh)
          button_ref[label]=button
          return button

    
      def borrow_books():
          destroy_page()
          heading_ref['frame'].destroy()
          heading_ref['label'].destroy()
          button_home =  createButton("Home",0,0.9,0.25,0.1,lambda: [home()])
          button_Borrow_book = createButton("Borrow Book",0.28,0.2,0.45,0.1,lambda: [after_borrow_book()])
          button_Return_book = createButton("Return Book",0.28,0.4,0.45,0.1,lambda: [after_return_book()])
      
          button_View_all_books = createButton("View all books",0.28,0.6,0.45,0.1,lambda: [after_view_all_available_books()])
      
    
      def login_page():
          headingFrame1 = createHeadingFrame()
          headingLabel = createLabel("Welcome to \n Rcis Library",headingFrame1)
        
          button_Scan = createButton('Scan',0.28,0.4,0.45,0.1,lambda: [student_scan()])
          button_Admin_Scan = createButton('Admin Scan',0.28,0.6,0.45,0.1,lambda: [after_admin_scan()])

        
      def after_borrow_book():
          destroy_page()
            
          button_scan_book = createButton('Scan book',0.28,0.5,0.45,0.1,lambda: [borrow_function()])
          button_home =  createButton("Home",0,0.9,0.25,0.1,lambda: [home()])
          button_ref['Home'].bind('<Button-1>',home)
        
        
      def after_return_book():
          destroy_page()
            
          button_return_book = createButton('Scan book',0.28,0.5,0.45,0.1,lambda: [return_function()])
          button_home =  createButton("Home",0,0.9,0.25,0.1,lambda: [home()])
          button_ref['Home'].bind('<Button-1>',home)
          

      def after_scan_book_borrow():
          destroy_page()
            
          label = Label(root, text = student_name+' borrowed '+book_name, font=('calibre',15, 'bold'))
          label.place(relx=0.14,rely=0.2,relwidth=0.8,relheight=0.5)
            
          button_home =  createButton("Home",0,0.9,0.25,0.1,lambda: [home(),label.destroy()])
          
                
      def after_scan_book_return():
          destroy_page()
            
          label = Label(root, text = student_name+' returned '+book_name, font=('calibre',15, 'bold'))
          label.place(relx=0.14,rely=0.2,relwidth=0.8,relheight=0.5)
            
          button_home =  createButton("Home",0,0.9,0.25,0.1,lambda: [home(),label.destroy()])
          

      def after_view_all_available_books():
          destroy_page()
            
          cursor=con.cursor()
          query = ("SELECT * FROM book WHERE status_of_book='Available'")
          cursor.execute(query,)
          result=cursor.fetchall()
        
          cursor.close()
          all_available_books_1=pd.DataFrame(result)
          tframe = Frame()
          tframe.pack()
          table = TableCanvas(tframe,data=all_available_books_1.T)
          table.show()
        

      def after_admin_scan():
          destroy_page()
          heading_ref['frame'].destroy()
          heading_ref['label'].destroy()
          
         
          button_graph1 = createButton("Books borrowed the most",0.28,0.2,0.45,0.1,lambda: [Mat1()])
          button_graph1.bind('<Button-1>',Mat1)
            
          button_change_students = createButton("Number of books by section",0.28,0.32,0.45,0.1,lambda: [Mat2()])
          button_change_students.bind('<Button-1>',Mat2)

          button_change_books = createButton("Students who read the most books",0.28,0.44,0.45,0.1,lambda: [Mat3()])
          button_change_books.bind('<Button-1>',Mat3)

          button_View_all_books = createButton("View all books",0.28,0.56,0.45,0.1,lambda: [after_view_all_books_admin()])
          button_View_all_books.bind('<Button-1>',after_view_all_books_admin)

          button_fines = createButton("Fines",0.28,0.68,0.45,0.1,lambda: [after_fines()])
          button_fines.bind('<Button-1>',after_fines)
          
          
      def after_view_all_books_admin(event):
          destroy_page()
          
          cursor=con.cursor()
          query = ("SELECT * FROM book WHERE status_of_book='Available'")
          cursor.execute(query,)
          result=cursor.fetchall()
          cursor.close()
          all_available_books_1=pd.DataFrame(result)
        
          tframe = Frame()
          tframe.pack()
          table = TableCanvas(tframe,data=all_available_books_1.T)
          table.show()
              
            
      def after_fines(event):

          destroy_page()
          button_Scan = createButton('Scan',0.28,0.4,0.45,0.1,lambda: [fines_scan()])
          button_home =  createButton("Home",0,0.9,0.25,0.1,lambda: [home(),label.destroy()])

              
      def fines_scan():
          student_fine_id=scan()
          global student_fine_id1
          student_fine_id1=int(student_fine_id)
          print(student_fine_id1)
          cursor=con.cursor()
          query = ("select sum(fine) from borrow_log group by adm_no having adm_no=(%s);")
          cursor.execute(query,(student_fine_id1,))
          result=cursor.fetchall()
          cursor.close()
          sum=str(result[0])
          cursor=con.cursor()
          query = ("select name from students where adm_no=(%s);")
          cursor.execute(query,(student_fine_id1,))
          result=cursor.fetchall()
          name=str(result[0])
          cursor.close()
          destroy_page()
          label = Label(root, text = str(name)+' has to pay '+sum, font=('calibre',15, 'bold'))
          label.place(relx=0.14,rely=0.2,relwidth=0.8,relheight=0.5)
          button_fine_paid = createButton('Fine Paid',0.28,0.75,0.25,0.1,lambda: [fines_paid()])
          button_fine_not_paid = createButton('Fine Not Paid',0.58,0.75,0.25,0.1,lambda: [home()])
    
    
      def fines_paid():
          cursor=con.cursor()
          query = ("update borrow_log set fine_paid=TRUE where adm_no=(%s)")
          cursor.execute(query,(student_fine_id1,))
          result=cursor.fetchall()
          cursor.close()
          home()
        
            
      def Mat1():
            destroy_page()
            
            cursor=con.cursor()
            sql3=("select b.book_code, book_name,count(b.book_code) from borrow_log b, book c where b.book_code=c.book_code group by b.book_code order by count(b.book_code) DESC;")
            cursor.execute(sql3,)
            data1=cursor.fetchall()
            df2=pd.DataFrame(data1)
            
#             %matplotlib
            
            plt.figure("Graph")
            plt.tick_params(axis='x', colors='red')
            plt.tick_params(axis='y', colors='red')
            plt.bar(df2[0],df2[2],color='violet',width=0.25)
            plt.title("Book that were borrowed most",color='indigo',size=20)
            plt.xlabel("Book ID", color='mediumorchid',size=15)
            plt.ylabel("No. of books borrowed",color='mediumorchid',size=15)
            plt.show()
            
            
      def Mat2():
            destroy_page()
            
            cursor=con.cursor()
            sql2=("select b.book_code,s.Adm_no,class_sec,date_of_issue,date_of_actual_return,fine,count(class_sec) from students s, borrow_log b where s.Adm_no=b.Adm_no group by class_sec order by class_sec;")
            cursor.execute(sql2,)
            data2=cursor.fetchall()
            df3=pd.DataFrame(data2) 
            
#             %matplotlib 
            
            labels = ['12a','12b','12c']
            value=[i for i in df3[6]]

            plt.figure("Graph")
            plt.tick_params(axis='x', colors='red')
            plt.tick_params(axis='y', colors='red')
            plt.bar(labels,value,color='lightseagreen',width=0.5)
            plt.title("Number of books borrowed by each section",color='green',size=20)
            plt.xlabel("Sections",color='seagreen',size=15)
            plt.ylabel("No. of books borrowed",color='seagreen',size=15)

            
      def Mat3():
            destroy_page()
            
            cursor=con.cursor()
            sql4=("select b.adm_no,name,count(b.adm_no)from borrow_log b, students s where s.adm_no=b.adm_no group by b.adm_no order by count(b.adm_no) DESC;")
            cursor.execute(sql4,)
            data3=cursor.fetchall()
            df4=pd.DataFrame(data3)
            
#             %matplotlib
            
            labels=[x for x in df4[0]]
            
            plt.figure("Graph")
            plt.tick_params(axis='x', colors='red')
            plt.tick_params(axis='y', colors='red')
            plt.bar(df4[0],df4[2],color='deeppink',width=0.40)
            plt.title("Students who read the most books",color='indigo',size=20)
            plt.xlabel("Book ID", color='magenta',size=15)
            plt.ylabel("No. of books borrowed",color='magenta',size=15)
            plt.xticks(labels) 
            
            
      login_page()
      root.mainloop()
